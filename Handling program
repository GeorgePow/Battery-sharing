from random import normalvariate, choice, random
from math import log
import RPi.GPIO as GPIO
import pymysql.cursors
import time


class Photovoltaic:
    '''Класс показывает состояние солнечных панелей/источников энергии'''
    func = normalvariate(0, 0.15)  # функция, задающая мощность выработки
    possiblepower = [70, 80, 90]

    def __init__(self, num, rand=False):
        self.num = num
        self.power = choice(Photovoltaic.possiblepower) if rand else 100  # стандартный множитель мощности
        self.standartprod = 8.079995
        self.prod = round(self.set_production(), 6)

    # функция возвращает доступную мощность
    def get_production(self):
        return self.prod

    # функция передачи доступной мощности
    def transfer_energy(self, load):
        # передаём всю доступную энергию и получаем оставшуюся
        self.prod = load.receive_energy('Photovoltaic', self.prod)

    # функция объявления выработки энергии
    def set_production(self):
        return create_capacity(self, self.power, Photovoltaic.func, base=self.standartprod)


class Load:
    '''Класс показывает состояние потребителя'''
    func = (-0.5 * log(random())) ** 1.5  # функция, задающая потребление нагрузкой
    possiblepower = [30, 40, 50]

    def __init__(self, num, rand=False):
        self.num = num
        self.load = choice(Load.possiblepower) if rand else 35 # стандартный множитель мощности
        self.standartcons = 14.752  # стандартная мощность
        self.cons = round(self.set_consumption(), 6)
        self.needy = True
        self.producers = []
        self.received = dict()

    # функция объявления нагрузки на данный час
    def set_consumption(self):
        return create_capacity(self, self.load, Load.func, base=self.standartcons)

    # функция возвращает требуемую мощность
    def get_consumption(self):
        return self.cons

    # функция получения требуемой мощности
    def receive_energy(self, donorname, energy):
    	if energy is 'all':
    		self.received[str(len(self.received)) + ") " + donorname], self.cons = self.cons, 0
    		return
    	self.cons -= energy
    	energy, self.cons, self.needy, ts = (-self.cons, 0, False, energy + self.cons) if self.cons <= 0 else (0, self.cons, True, energy)
    	self.received[str(len(self.received)) + ") " + donorname] = ts
    	return energy

    # функция добавления источника энергии
    def add_producer(self, *producer):
        if self.needy:
            self.producers.extend(producer)
        else:
            self.producers.clear()
    
    # функция питания от запасных источников энергии
    def use_producer(self):
    	if self.producers == []:
    		return
    	while self.producers and self.needy:
    		self.producers.pop(0).transfer_energy(self)
    
    # функция вывода источников энергии на экран
    def declare_donors(self):
    	return [name + ": " + str(round(energy, 6)) for name, energy in self.received.items()]


class Storage:
    '''Класс показывает состояние аккумулятора'''
    possiblepower = [50, 55, 60]

    def __init__(self, num, rand=False):
        self.num = num
        self.maxroominess = choice(Storage.possiblepower) if rand else 40
        self.roominess = self.maxroominess
        # self.isfull = None
        self.producers = []
        self.received = dict()
     
    # функция возвращает значение заряда  
    def get_charge(self):
    	return self.roominess

    # запрос о статусе заряда
    def check_charge(self, status):
        # status == True -- запрос о полном заряде
        # status == False -- запрос о полном разряде
        if status:
            return True if self.roominess == self.maxroominess else False
        return True if self.roominess == 0 else False

    # функция получения значения из БД        
    def fetch_value(self):
        sql = "SELECT 'battery_charge' FROM 'users' WHERE 'user_id'=%s"
        cursor.execute(sql, (self.num,))
        result = cursor.fetchone()
        
    # функция отправления данных в БД
    def insert_value(self):
        sql = "INSERT INTO 'users' ('battery_charege') VALUES (%s) WHERE 'user_id'=%s"
        cursor.execute(sql, (round(self.roominess / self.maxroominess), self.num))
        connection.commit()

    # функция получения требуемой мощности
    def receive_energy(self, donorname, energy):
        self.roominess += energy
        energy, self.roominess, ts = (
        self.roominess - self.maxroominess,
        self.maxroominess,
        energy - (self.roominess - self.maxroominess)) if self.roominess > self.maxroominess \
        else (0, self.roominess, energy)
        self.received[str(len(self.received)) + ") " + donorname] = ts
        return energy

    # функция передачи доступной мощности
    def transfer_energy(self, load):
        # передаём всю доступную энергию и получаем оставшуюся
        self.roominess = load.receive_energy('Storage', self.roominess)

    # функция добавления источника энергии
    def add_producer(self, *producer):
        if not self.check_charge(True):
            self.producers.extend(producer)
        else:
            self.producers.clear()
    
    # функция питания от запасных источников энергии
    def use_producer(self):
    	if self.producers == []:
    		return
    	for prod in self.producers:
    		if self.check_charge(True):
    			break
    		prod.transfer_energy(self)
    
    # функция вывода источников энергии на экран
    def declare_donors(self):
    	return [name + ": " + str(round(energy, 6)) for name, energy in self.received.items()] + ["Total: " + str(sum(self.received.values()))]
    	
    	
class Grid:
	def __init__(self, power):
		self.power = power
		
	# функция передачи доступной мощности
	def transfer_energy(self, load):
		# передаём всю доступную энергию
		load.receive_energy('Grid', self.power)


# функция передачи вырабатываемой мощности на нагрузку
def pv_to_load(pv, load):
    pv.transfer_energy(load)


# функция задания мощности
def create_capacity(pv, power, func, base=0.0):
    generation = [func for _ in range(7)]
    for i in range(workhours):
        generation += [func]
        generation[i] = sum(generation[i:i + 8]) / 8
        return (sum(generation[:-7]) + base) * power


# функция обмена энергией
def energy_exchange(singleagent, multiagent, direction=True):
    if direction:
        for acc in multiagent:
            acc.add_producer(singleagent)
    else:
        singleagent.add_producer(*multiagent)


# функция использования чужой энергии
def activate_additional_producers(*consumers):
	for load in consumers:
		load.use_producer()


# главная функция
def main():
	global pins
    NOH = 5  # number of houses
    power = [20, 25, 30, 35]  # возможная мощность потребителя
    workhours = 24  # количество часов работы
    grid = Grid('all')
    
    pins = set_pins(True)
    start_exchange()
	

def set_pins():
    elements = dict()
    val = ' '
    while val:
        key, *value = input().split()
        elements[key] = value
    return elements


def swap_pins(pin_name, pin_num, status):
	mode = HIGH if status else LOW
	GPIO.setmode(pins[pins_name][pins_num], status)


# функция обмена энергией
def start_exchange():
    houses = list([tuple(element(i, True) for i in range(NOH)) for element in (Photovoltaic, Load, Storage)]) # объявление хозяйств

    for hour in range(1):  # работа в течении указанного времени
        # for nh in range(NOH):  # задаём значения на данный час:
        # 	houses[nh][0].set_production()  # производства энергии
        # 	houses[nh][1].set_consumption()  # потребляемой нагрузки
        
        for pv, load, storage in list(zip(*houses)):
        	print("--------\nPV: " + str(pv.get_production()),
        	         "Load: " + str(load.get_consumption()),
        	         "Storage: " + str(storage.get_charge()), sep='\n')
        print("--------\n\nvvvvvvvvvv\n")

        # цикл распределения мощности
        for i in range(NOH):
            pv, load, storage = [el[i] for el in houses]  # компоненты рассматриваемого дома
            # значения производимой энергии и потребления для рассматриваемого дома
            pvprod, loadcons = pv.get_production(), load.get_consumption()

            # если производство превышает потребление
            if pvprod >= loadcons:

                # обеспечиваем нашу нагрузку производимой энергией
                pv_to_load(pv, load)

                # если остаётся произведённая энергия
                if pv.get_production():

                    # обеспечиваем соседей энергией при необходимости
                    energy_exchange(pv, houses[1])

                    # если ещё осталась энегрия
                    if pv.get_production():

                        # если наш аккумулятор полностью заряжен
                        if storage.check_charge(True):

                            # обеспечиваем энергией аккумуляторы соседей при необходимости
                            energy_exchange(pv, houses[2])

                        # если наш аккумулятор заряжен частично
                        else:

                            # заряжаем аккумулятор производимой мощностью
                            pv_to_load(pv, storage)

                            # если ещё осталась произведённая энергия
                            if pv.get_production():

                                # обеспечиваем энергией аккумуляторы соседей при необходимости
                                energy_exchange(pv, houses[2])

                            # если произведённая энергия закончилась
                            else:

                                # если у соседей есть произведённая энергия
                                neighbourpv = list(filter(lambda pv: pv.get_production(), houses[0]))
                                if neighbourpv:

                                    # если наш аккумулятор заряжен частично
                                    if not (storage.check_charge(True)):

                                        # запрашиваем энергию соседей для нашего аккумулятора
                                        storage.add_producer(*neighbourpv)

                                # если у соседей нет энергии
                                else:

                                    # если наш аккумулятор не разряжен полностью
                                    if not storage.check_charge(False):
                                    	
                                    	# запрашиваем передачу нашей энергии соседям
                                    	energy_exchange(storage, houses[1])

					# если произведённая энергия закончилась
                    else:

                        # если у соседей есть произведённая энергия
                        neighbourpv = list(filter(lambda pv: pv.get_production(), houses[0]))
                        if neighbourpv:  # any([pv.get_production() for pv in houses[0]]):

                            # если наш аккумулятор заряжен частично
                            if not (storage.check_charge(True)):

                                # запрашиваем энергию соседей для нашего аккумулятора
                                storage.add_producer(*neighbourpv)

                        # если у соседей нет энергии
                        else:

                            # если наш аккумулятор заряжен
                            if not (storage.check_charge(False)):

                                # запрашиваем передачу нашей энергии соседям
                                energy_exchange(storage, houses[1])

                # если произведённая энергия закончилась
                else:

                    # если у соседей есть произведённая энергия
                    neighbourpv = list(filter(lambda pv: pv.get_production(), houses[0]))
                    if neighbourpv:

                        # если наш аккумулятор заряжен частично
                        if not (storage.check_charge(True)):

                            # запрашиваем энергию соседей для нашего аккумулятора
                            storage.add_producer(neighbourpv)

                    # если у соседей нет энергии
                    else:

                        # если наш аккумулятор заряжен
                        if not (storage.check_charge(False)):

                            # запрашиваем передачу нашей запасённой энергии соседям
                            energy_exchange(storage, houses[1])

            # если производство энергии меньше потребления
            else:

                # обеспечиваем нашу нагрузку производимой энергией
                pv_to_load(pv, load)

                # запрашиваем энергию соседей для нашей нагрузки
                load.add_producer(*list(filter(lambda pv: pv.get_production(), houses[0])))

                # если нам ещё нужна энергия
                if load.get_consumption():

                    # если наш аккумулятор полностью разряжен
                    if storage.check_charge(False):

                        # запрашиваем запасённую энергию соседей для нашей нагрузки
                        energy_exchange(load, houses[2], direction=False)

                        # если нам ещё нужна энергия
                        if load.get_consumption():

                            # запрашиваем энергию с грида на нашу нагрузку
                            load.add_producer(grid)

                    # если есть запасённая энергия
                    else:
                    	
                    	# подаём нашу запасённую энергию на нашу нагрузку
                    	pv_to_load(storage, load)
                    	
                    	# если нам ещё нужна энергия
                    	if load.get_consumption():
                    		
                    		# запрашиваем запасённую энергию соседей для нашей нагрузки
                    		energy_exchange(load, houses[2], direction=False)
                    		# если нам ещё нужна энергия
                    		if load.get_consumption():
                    			
                    			# запрашиваем энергию с грида на нашу нагрузку
                    			load.add_producer(grid)
                    			
                    	# если нам уже не нужна энергия
                    	else:
                    		
                    		# если наш аккумулятор не полностью разряжен
                    		if not (storage.check_charge(False)):
                    			
                    			# запрашиваем передачу нашей энергии соседям
                    			energy_exchange(storage, houses[1])

				# если нам энергии достаточно
                else:

                    # если у соседей есть произведённая энергия
                    neighbourpv = list(filter(lambda pv: pv.get_production(), houses[0]))
                    if neighbourpv:

                        # если наш аккумулятор заряжен частично
                        if not (storage.check_charge(True)):

                            # запрашиваем энергию соседей для нашего аккумулятора
                            energy_exchange(storage, neighbourpv, direction=False)

                    # если у соседей нет энергии
                    else:

                        # если наш аккумулятор заряжен
                        if not (storage.check_charge(False)):

                            # запрашиваем передачу нашей энергии соседям
                            energy_exchange(storage, houses[1])
                            
        activate_additional_producers(*houses[1], *houses[2])

        for pv, load, storage in list(zip(*houses)):
        	print("--------\nPV: " + str(round(pv.get_production(), 6)),
        	         "Load: " + str(round(load.get_consumption(), 6)),
        	         "\t" + "\n\t".join(load.declare_donors()),
        	         "Storage: " + str(round(storage.get_charge(), 6)), sep='\n')


if __name__ == '__main__':
    main()

